#include <WiFi.h>
#include <WiFiClientSecure.h>

const char* ssid = "TU_SSID";                  // Tu nombre de red WiFi
const char* password = "TU_PASSWORD";          // Tu contraseña de red WiFi

// URL del servidor con HTTPS (asegúrate que el endpoint de Node-RED no incluya /admin)
const char* serverName = "https://emetec.wetec.um.edu.ar/weather";

// Variables de ejemplo de los sensores (temperatura, humedad, etc.)
float temperature = 22.5;
float humidity = 60.0;

void setup() {
  Serial.begin(115200);

  // Conectar a la red WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConectado a la red WiFi");

  // Crear cliente seguro para HTTPS
  WiFiClientSecure client;

  // Si estás en un entorno de pruebas y no te importa la verificación del certificado:
  client.setInsecure();

  // Conectar al servidor
  if (client.connect("emetec.wetec.um.edu.ar", 443)) {
    Serial.println("Conectado al servidor HTTPS");

    // Crear los datos JSON para enviar (temperatura y humedad)
    String postData = "{\"temperature\":" + String(temperature) + ",\"humidity\":" + String(humidity) + "}";

    // Enviar solicitud HTTP POST
    client.println("POST /weather HTTP/1.1");
    client.println("Host: emetec.wetec.um.edu.ar");
    client.println("User-Agent: ESP32");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(postData.length());
    client.println();  // Línea vacía para indicar fin de encabezados
    client.println(postData);  // Cuerpo de la solicitud (datos)

    // Leer la respuesta del servidor
    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        Serial.println("Cuerpo de la respuesta:");
        break;
      }
    }

    // Imprimir el cuerpo de la respuesta
    String response = client.readString();
    Serial.println(response);

  } else {
    Serial.println("Fallo al conectar al servidor HTTPS");
  }

  // Finalizar la conexión
  client.stop();
}

void loop() {
  // Enviar los datos cada 10 segundos (para pruebas)
  delay(10000);
}